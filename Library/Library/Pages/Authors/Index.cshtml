@page
@model Library.Pages.Authors.IndexModel

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-page="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Author[0].AuthorId)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Author[0].Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Author[0].Nationality)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model.Author) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.AuthorId)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Nationality)
            </td>
            <td>
                <a asp-page="./Edit" asp-route-id="@item.AuthorId">Edit</a> |
                <a asp-page="./Details" asp-route-id="@item.AuthorId">Details</a> |
                <a asp-page="./Delete" asp-route-id="@item.AuthorId">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>

<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script>
    $(document).ready(function () {
        $("#searchInput").on("input", function () {
            var searchString = $(this).val().toLowerCase();

            // Przechowaj referencję do tabeli
            var table = $("#booksTable");

            // Przechowaj referencje do wierszy w tabeli (poza nagłówkiem)
            var rows = table.find("tbody tr");

            // Iteruj przez wiersze i ukrywaj/odkrywaj w zależności od warunków wyszukiwania
            rows.each(function () {
                var title = $(this).find("td:eq(1)").text().toLowerCase(); // tytuł książki znajduje się w drugiej kolumnie (index 1)
                var author = $(this).find("td:eq(2)").text().toLowerCase(); //  autor znajduje się w trzeciej kolumnie (index 2)

                if (title.includes(searchString) || author.includes(searchString)) {
                    $(this).show();
                } else {
                    $(this).hide();
                }
            });
        });
    });
</script>
<script>
    $(document).ready(function () {
        $("th").click(function () {
            var table = $(this).parents('table').eq(0);
            var columnIndex = $(this).index();
            var rows = table.find('tr:gt(0)').toArray().sort(compareValues(columnIndex));

            // Remove sorting indicators and classes from other headers
            $("th").not(this).removeClass("asc desc").removeClass("sorted-column");

            // Add sorted-column class to the clicked header
            $(this).addClass("sorted-column");

            // Toggle sorting order and set appropriate class
            if ($(this).hasClass("asc")) {
                // Already ascending, switch to descending
                rows = rows.reverse();
                $(this).removeClass("asc").addClass("desc");
            } else if ($(this).hasClass("desc")) {
                // Already descending, remove sorting
                rows = table.find('tr:gt(0)').toArray().sort(compareValues(0));
                $(this).removeClass("desc").removeClass("asc").removeClass("sorted-column")
            } else {
                // Not sorted, sort ascending
                rows = table.find('tr:gt(0)').toArray().sort(compareValues(columnIndex));
                $(this).addClass("asc");
            }


            for (var i = 0; i < rows.length; i++) {
                table.append(rows[i]);
            }
        });

        function compareValues(columnIndex) {
            return function (a, b) {
                var valA = getCellValue(a, columnIndex);
                var valB = getCellValue(b, columnIndex);

                return compare(valA, valB);
            };
        }

        function getCellValue(row, index) {
            return $(row).children('td').eq(index).text();
        }

        function compare(a, b) {
            if (!isNaN(a) && !isNaN(b)) {
                return parseFloat(a) - parseFloat(b);
            } else if (isValidDate(a) && isValidDate(b)) {
                return new Date(a) - new Date(b);
            } else {
                return a.localeCompare(b);
            }
        }

        function isValidDate(dateString) {
            var regex = /^\d{4}-\d{2}-\d{2}$/;
            return dateString.match(regex) !== null;
        }
    });
</script>
<style>
    th {
        cursor: pointer;
    }

    .asc:after {
        content: '⬆';
    }

    .desc:after {
        content: '⬇';
    }

    th.sorted-column {
        background-color: lightgray;
    }
</style>