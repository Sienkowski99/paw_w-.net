@page
@model Library.Pages.Books.IndexModel

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-page="Create">Create New</a>
</p>
<div>
    <label for="bookFilter">Search by Title or Author:</label>
    <input type="text" id="searchInput" placeholder="Enter search term" />
</div>

<table class="table" id="booksTable">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Book[0].BookId)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Book[0].Title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Book[0].Author)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Book[0].PublicationDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Book[0].Price)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model.Book) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.BookId)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Title)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Author.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PublicationDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            <td>
                <a asp-page="./Edit" asp-route-id="@item.BookId">Edit</a> |
                <a asp-page="./Details" asp-route-id="@item.BookId">Details</a> |
                <a asp-page="./Delete" asp-route-id="@item.BookId">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>

<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script>
    $(document).ready(function () {
        $("#searchInput").on("input", function () {
            var searchString = $(this).val().toLowerCase();

            // Przechowaj referencję do tabeli
            var table = $("#booksTable");

            // Przechowaj referencje do wierszy w tabeli (poza nagłówkiem)
            var rows = table.find("tbody tr");

            // Iteruj przez wiersze i ukrywaj/odkrywaj w zależności od warunków wyszukiwania
            rows.each(function () {
                var title = $(this).find("td:eq(1)").text().toLowerCase(); // tytuł książki znajduje się w drugiej kolumnie (index 1)
                var author = $(this).find("td:eq(2)").text().toLowerCase(); //  autor znajduje się w trzeciej kolumnie (index 2)

                if (title.includes(searchString) || author.includes(searchString)) {
                    $(this).show();
                } else {
                    $(this).hide();
                }
            });
        });
    });
</script>
<script>
    $(document).ready(function () {
        var defaultOrder = true; // Initial sort order (true for ascending, false for descending)

        $("th").click(function () {
            var table = $(this).parents('table').eq(0);
            var columnIndex = $(this).index();
            var rows = table.find('tr:gt(0)').toArray().sort(compareValues(columnIndex));

            // Remove sorting indicators and classes from other headers
            $("th").not(this).removeClass("asc desc").removeClass("sorted-column");

            // Add sorted-column class to the clicked header
            $(this).addClass("sorted-column");

            // Toggle sorting order and set appropriate class
            if ($(this).hasClass("asc")) {
                // Already ascending, switch to descending
                rows = rows.reverse();
                $(this).removeClass("asc").addClass("desc");
                defaultOrder = false;
            } else if ($(this).hasClass("desc")) {
                // Already descending, remove sorting
                rows = table.find('tr:gt(0)').toArray().sort(compareValues(0));
                $(this).removeClass("desc").removeClass("asc").removeClass("sorted-column")
                defaultOrder = true;
            } else {
                // Not sorted, sort ascending
                rows = table.find('tr:gt(0)').toArray().sort(compareValues(columnIndex));
                $(this).addClass("asc");
                defaultOrder = false;
            }


            for (var i = 0; i < rows.length; i++) {
                table.append(rows[i]);
            }
        });

        function compareValues(columnIndex) {
            return function (a, b) {
                var valA = getCellValue(a, columnIndex);
                var valB = getCellValue(b, columnIndex);

                return compare(valA, valB);
            };
        }

        function getCellValue(row, index) {
            return $(row).children('td').eq(index).text();
        }

        function extractDateFromString(inputString) {
            const matches = inputString.match(/(\d{2}\.\d{2}\.\d{4})/);
            return matches ? new Date(matches[0]) : null;
        }

        function extractNumberFromString(inputString) {
            const matches = inputString.match(/(\d+(\,\d{1,2})?)/);
            return matches ? parseFloat(matches[0].replace(',', '.')) : NaN;
        }

        function extractAndParse(value) {
            if (!isNaN(value)) {
                return parseFloat(value);
            } else if (isValidDate(value)) {
                return new Date(value);
            } else {
                const extractedDate = extractDateFromString(value);
                if (extractedDate !== null) {
                    return extractedDate
                }

                const extractedNumber = extractNumberFromString(value);
                return isNaN(extractedNumber) ? value : extractedNumber;
            }
        }

        function compare(a, b) {
            const parsedA = extractAndParse(a);
            const parsedB = extractAndParse(b);

            console.log({ parsedA, parsedB });

            if (typeof parsedA === 'number' && typeof parsedB === 'number') {
                console.log(1);
                return parsedA - parsedB;
            } else if (parsedA instanceof Date && parsedB instanceof Date) {
                console.log(2);
                return parsedA - parsedB;
            } else {
                console.log(3);
                return String(parsedA).localeCompare(String(parsedB));
            }
        }

        function isValidDate(dateString) {
            var regex = /^\d{4}-\d{2}-\d{2}$/;
            return dateString.match(regex) !== null;
        }
    });
</script>
<style>
    th {
        cursor: pointer;
    }

    .asc:after {
        content: '⬆';
    }

    .desc:after {
        content: '⬇';
    }

    th.sorted-column {
        background-color: lightgray;
    }
</style>